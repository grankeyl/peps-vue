import logging
from pymongo import MongoClient
import certifi
import threading
from pathlib import Path
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, types
from datetime import timedelta, datetime
from aiogram.dispatcher.filters.builtin import CommandStart, ChatTypeFilter
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, CallbackQuery
from aiogram.utils import executor
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.callback_data import CallbackData

TOKEN = "5171613069:AAHen86_3BtQE20RvyL-zWuxQVsGwBTPW0g"
admin_chat_id = -1001641770664
admins_id = [5557202913]

cluster = MongoClient("mongodb+srv://nickework:nickework223@cluster0.ig5au4d.mongodb.net/?retryWrites=true&w=majority", tlsCAFile=certifi.where())

db = cluster['Guide1']
workers = db['workers']

def f():
  threading.Timer(20.0, f).start()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  print("This Is Worked!")

f()

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π storage, –æ–Ω–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–∑–∂–µ.
storage = MemoryStorage()
# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ bot –∏ storage
dp = Dispatcher(bot, storage=storage)
# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–∏–¥–¥–ª–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

# –ü—Ä–æ–ø–∏—à–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
reg_button = KeyboardButton("üñ• –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç")
reger_button = KeyboardButton("üíé –ó–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω")
info_button = KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
price_button = KeyboardButton("üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
works_button = KeyboardButton("üíé –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
reg_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
reg_keyboard.add(reg_button, reger_button, info_button, price_button, works_button)

site_button_card_one = KeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥")
site_button_card_two = KeyboardButton("–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∏–∫")
site_button_card_three = KeyboardButton("–°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞")
site_button_card_four = KeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç")
site_button_card_five = KeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω")
site_button_card_six = KeyboardButton("–û–±–º–µ–Ω–Ω–∏–∫")
site_button_card_seven = KeyboardButton("–î—Ä—É–≥–æ–µ")
cancel_button = KeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")
site_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
site_keyboard.add(site_button_card_one, site_button_card_two, site_button_card_three, site_button_card_four, site_button_card_five, site_button_card_six, site_button_card_seven, cancel_button)

# design_button_card_one = KeyboardButton("Low Plan")
# design_button_card_two = KeyboardButton("Middle Plan")
# design_button_card_three = KeyboardButton("Grand Plan")
# design_button_card_four = KeyboardButton("Fantastic Plan")
# cancel_button = KeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")
# design_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
# design_keyboard.add(design_button_card_one, design_button_card_two, design_button_card_three, design_button_card_four, cancel_button)

design_button_tarif_card_one = KeyboardButton("–ê–≤–∞—Ç–∞—Ä–∫–∞")
design_button_tarif_card_two = KeyboardButton("–ë–∞–Ω–Ω–µ—Ä")
design_button_tarif_card_three = KeyboardButton("–ü—Ä–æ–º–æ-—Ä–æ–ª–∏–∫")
design_button_tarif_card_four = KeyboardButton("–ê–Ω–∏–º–∞—Ü–∏—è")
design_button_tarif_card_five = KeyboardButton("–í–µ–±-–¥–∏–∑–∞–π–Ω")
design_button_tarif_card_six = KeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ—Ü.—Å–µ—Ç–µ–π")
cancel_button = KeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")
design_tarif_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
design_tarif_keyboard.add(design_button_tarif_card_one, design_button_tarif_card_two, design_button_tarif_card_three, design_button_tarif_card_four, design_button_tarif_card_five, design_button_tarif_card_six, cancel_button)

# –ü—Ä–æ–ø–∏—à–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –û—Ç–º–µ–Ω–∞ –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
note_button = InlineKeyboardButton("–û—Ç–∫–∞–∑ ‚ùå", callback_data='button1')
yes_button = InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data='button2')
vote_keyboard = InlineKeyboardMarkup()
vote_keyboard.add(note_button, yes_button)

noter_button = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data='buttoner1')
voter_keyboard = InlineKeyboardMarkup()
voter_keyboard.add(noter_button)

# –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Callback –¥–∞–Ω–Ω—ã—Ö
reg_callback = CallbackData("reg", "status", "chat_id")

# –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–ª–∞–≤—É –≤ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
def inline(chat_id):
    cancel = InlineKeyboardButton(
        text="–û—Ç–∫–∞–∑ ‚ùå",
        callback_data=reg_callback.new(
            status="1", chat_id=chat_id
        ),
    )
    confirm = InlineKeyboardButton(
        text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ",
        callback_data=reg_callback.new(
            status="2", chat_id=chat_id
        ),
    )
    conf_inline = InlineKeyboardMarkup()
    conf_inline.insert(cancel).insert(confirm)
    return conf_inline

def inlineaccept(chat_id):
    acceptbdd = InlineKeyboardButton(
        text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω ‚úÖ",
        callback_data=reg_callback.new(
            status="3", chat_id=chat_id,
        ),
    )
    conf_inline = InlineKeyboardMarkup()
    conf_inline.insert(acceptbdd)
    return conf_inline


@dp.callback_query_handler(reg_callback.filter(status="3"))
async def accept(call: CallbackQuery, callback_data: dict):
    await call.answer()
    print(call.message.message_id, "conf")
    await call.message.edit_reply_markup()
    await bot.delete_message(
            call.message.chat.id, call.message.message_id
    )
    await bot.send_message(
        call.message.chat.id, "<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ BrainOrUx Studio, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.</b>\n\n–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∏–∂–µ:", reply_markup=reg_keyboard
    )
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –≤ –ë–î
    workers.insert_one(
        {
            "_id": int(callback_data.get("chat_id")),
        }
    )

@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_callback_button1(call: CallbackQuery):
    # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    await bot.edit_message_text(
        f"–ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç @{call.from_user.username}\n\n", admin_chat_id, call.message.message_id, reply_markup=voter_keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'buttoner1')
async def process_callback_button1(call: CallbackQuery):
    # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    await bot.delete_message(
       admin_chat_id, call.message.message_id
    )

#
# @dp.callback_query_handler(lambda c: c.data == 'button2')
# # callback –¥–∞–Ω–Ω—ã–µ –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
# async def decline(callback_query: types.CallbackQuery):
#     await callback_query.answer()
#     # –†–µ–¥–∞—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
#     await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(
#         "–•—É–π–ª–∞–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑ –µ–≥–æ —Å–æ—Å—É–Ω–∫–∏!.", callback_query.message.message_id
#     )
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç.
#     await bot.send_message(int(callback_query.get("chat_id")), "–£–≤—ã –∏ –∞—Ö, –∏–¥–∏ –∫–∞ ...")

cancel_button = KeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")
profile3_button = KeyboardButton("üìö –ü–æ–º–æ—â—å")
profilegroup_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
profilegroup_keyboard.add(profile3_button, cancel_button)

cancel_button = KeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")
cancel_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_keyboard.add(cancel_button)


# –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å, –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ–≥–æ StatesGroup, –æ–Ω –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —é–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ –∞–Ω–∫–µ—Ç—É
# –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∑–∞–≥—É–≥–ª–∏—Ç–µ "aiogram –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"
class Programming(StatesGroup):
    # –≤–Ω—É—Ç—Ä–∏ –æ–±—ä—è–≤–ª—è–µ–º –°—Ç–µ–π—Ç—ã(—Å–æ—Å—Ç–æ—è–Ω–∏—è), –¥–∞–ª–µ–µ –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–ø–æ—á–∫–µ —ç—Ç–∏—Ö —Å—Ç–µ–π—Ç–æ–≤
    name = State()
    age = State()
    example = State()
    money = State()
    end = State()


class Design(StatesGroup):
    # –≤–Ω—É—Ç—Ä–∏ –æ–±—ä—è–≤–ª—è–µ–º –°—Ç–µ–π—Ç—ã(—Å–æ—Å—Ç–æ—è–Ω–∏—è), –¥–∞–ª–µ–µ –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–ø–æ—á–∫–µ —ç—Ç–∏—Ö —Å—Ç–µ–π—Ç–æ–≤
    name = State()
    age = State()
    lac = State()
    photo = State()
    money = State()
    end = State()


# banned_users = set()


# @dp.message_handler(user_id=banned_users)
# async def handle_banned(message: types.Message, state: FSMContext):
#     print(f"{message.from_user.username} –ø–∏—à–µ—Ç, –Ω–æ –º—ã –µ–º—É –Ω–µ –æ—Ç–≤–µ—Ç–∏–º!")
#     return True
    

# @dp.message_handler(Text(equals="/ban")) # –∑–¥–µ—Å—å —É–∫–∞–∂–∏ —Å–≤–æ–π ID
# async def handle_ban_command(message: types.Message, state: FSMContext):
#     # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
#     try:
#         abuser_id = int(message.get_args())
#     except (ValueError, TypeError):
#         return await message.reply("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
#     banned_users.add(abuser_id)
#     await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {abuser_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –ù–∞—á–Ω—ë–º –ø–∏—Å–∞—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–ø–∏—à–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
# –¢–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–µ–º —Ü–µ–ø–æ—á–∫—É —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç—ã

@dp.message_handler(Text(equals="/start"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.chat.id == admin_chat_id:
        if message.from_user.username:
            await bot.send_message(
                message.chat.id, "–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É", reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            await bot.send_message(
                message.chat.id, "–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º", reply_markup=types.ReplyKeyboardRemove()
            )

    else:
        await bot.send_message(
            message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ BrainOrUx Studio, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n<b>–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:</b>\n\n<pre>1) –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞ –∑–∞–∫–∞–∑—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã</pre>\n<pre>2) –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö</pre>",
            reply_markup=inlineaccept(
            f"{message.chat.id}",
            ),
        )

@dp.message_handler(Text(equals="–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await bot.send_message(
            message.chat.id, f'<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> \n\n<b>–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º:</b> @{message.from_user.username}\n<b>–í–∞—à –∞–π–¥–∏:</b> @{message.from_user.id}\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b> 0', reply_markup=profilegroup_keyboard
        )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message_handler(Text(equals="‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await bot.send_message(
            message.chat.id, f'<b>‚öôÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n<b>‚úèÔ∏è –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º:</b> @{message.from_user.username}\n<b>üîí –í–∞—à –∞–π–¥–∏:</b> @{message.from_user.id}', reply_markup=profilegroup_keyboard
        )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message_handler(Text(equals="üìö –ü–æ–º–æ—â—å"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await bot.send_message(
            message.chat.id, f'<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞:</b> @grankeyl, @inject_dev\n<b>üõ† –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º/–∂–∞–ª–æ–±–∞–º:</b> @grankeyl, @inject_dev\n<b>üí∏ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º:</b> @godot_maiden', reply_markup=profilegroup_keyboard
        )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message_handler(Text(equals="üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        # await bot.send_message(
        #     message.chat.id, f'<b>üí∏ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:</b>\n\n<b>‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥ - –û—Ç 150$ (—Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)</b>\n<b>‚Ä¢ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∏–∫ - –û—Ç 300$ (—Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)</b>\n<b>‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω - –û—Ç 800$ (—Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π)</b>\n\n‚ÄºÔ∏è –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–º–Ω–æ–≥–æ –Ω–∏–∂–µ, –≤—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è, –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!', reply_markup=profilegroup_keyboard
        # )
        await bot.send_message(
            message.chat.id, f'<b>–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏!</b>', reply_markup=profilegroup_keyboard
        )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message_handler(Text(equals="üíé –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await bot.send_message(
            message.chat.id, f'<b>üñ• –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ:</b>\n\n<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —Å–∞–π—Ç–∞–º–∏: @brainorux_russian, @brainorux_channel</b>\n<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –¥–∏–∑–∞–π–Ω–æ–º: @brainorux_design</b>', reply_markup=profilegroup_keyboard
        )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )

# –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã, –º—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º State –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —é–∑–µ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# –ü—Ä–æ–¥—É–º—ã–≤–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è handler–æ–≤ —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –≤–µ—Ä—Ö—É –≤ –Ω–∏–∑.
@dp.message_handler(Text(equals="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞"), state="*")
async def menu_button(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await state.finish()
        await bot.send_message(
        message.chat.id, "<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.</b>", reply_markup=reg_keyboard
        )
    else:
        await bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.", reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message_handler(Text(equals="üñ• –ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await state.update_data(name=message.text)
        await bot.send_message(
            message.chat.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å–∞–π—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω:</b>", reply_markup=site_keyboard
        )
        await Programming.age.set()
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
        await Programming.age.set()

@dp.message_handler(state=Programming.age, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
        await state.update_data(lac=message.text)
        await bot.send_message(
        message.chat.id, "<b>–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):</b>", reply_markup=cancel_keyboard
    )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
    await Programming.money.set()

@dp.message_handler(state=Programming.money, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
        await state.update_data(money=message.text)
        await bot.send_message(
        message.chat.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –±—é–¥–∂–µ—Ç:</b>", reply_markup=cancel_keyboard
    )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
    await Programming.example.set()

@dp.message_handler(state=Programming.example, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
        await state.update_data(example=message.text)
        await bot.send_message(
        message.chat.id, "<b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤:</b>", reply_markup=cancel_keyboard
    )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
    await Programming.end.set()


@dp.message_handler(state=Programming.end, content_types=types.ContentTypes.TEXT)
async def confirmation(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await bot.send_message(
        message.chat.id, "<b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.</b>", reply_markup=reg_keyboard
    )
    await bot.send_message(
        admin_chat_id,
        text = f"<b>üíª –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç </b>@{message.from_user.username}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"f'<b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b><pre> –°–∞–π—Ç</pre>\n'f'<b>–¢–∏–ø —Å–∞–π—Ç–∞:</b><pre> {data.get("lac")}</pre>\n'f'<b>–ë—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:</b><pre> {data.get("example")}</pre>\n'f'<b>–ü—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤:</b><pre> {data.get("name")}</pre>\n'f'<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> <pre>{data.get("money")}</pre>',
        reply_markup=inline(
            f"{message.chat.id}",
        ),
    )
    await state.finish()


@dp.callback_query_handler(reg_callback.filter(status="2"))
async def accept(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()

    await call.message.edit_reply_markup()

    nickname = call.data.split(":")[len(call.data.split(":")) - 1]

    accepting = f"<b>‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç @{call.from_user.username} </b>\n\n " + call.message.text

    await bot.edit_message_text(
        chat_id = admin_chat_id, message_id = call.message.message_id, text = accepting
    )
    
    await bot.send_message(int(callback_data.get("chat_id")), f"<b>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ</b>\n–°–µ–π—á–∞—Å —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @{call.from_user.username}. (–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º)")



@dp.message_handler(Text(equals="üíé –ó–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω"), state="*")
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        await state.update_data(name=message.text)
        await bot.send_message(
            message.chat.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞:</b>", reply_markup=design_tarif_keyboard
        )
        await Design.age.set()
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
        await Design.age.set()

@dp.message_handler(state=Design.age, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        print (message)
        await state.update_data(money=message.text)
        await bot.send_message(
        message.chat.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –±—é–¥–∂–µ—Ç:</b>", reply_markup=cancel_keyboard
    )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
    await Design.lac.set()

@dp.message_handler(state=Design.lac, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        print (message)
        await state.update_data(lac=message.text)
        await bot.send_message(
        message.chat.id, "<b>–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏):</b>", reply_markup=cancel_keyboard
    )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
    await Design.photo.set()

@dp.message_handler(state=Design.photo, content_types=types.ContentTypes.TEXT)
async def name(message: types.Message, state: FSMContext):
    if message.from_user.username:
        print (message)
        await state.update_data(name=message.text)
        await bot.send_message(
        message.chat.id, "<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:</b>", reply_markup=cancel_keyboard
    )
    else:
        await bot.send_message(
            message.chat.id, "<b>–û—à–∏–±–∫–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º.</b>", reply_markup=types.ReplyKeyboardRemove()
        )
    await Design.end.set()


@dp.message_handler(state=Design.end, content_types=types.ContentTypes.PHOTO)
async def confirmation(message: types.Message, state: FSMContext):
    await state.update_data(end=message.photo)
    data = await state.get_data()
    await bot.send_message(
        message.chat.id, "<b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç.</b>", reply_markup=reg_keyboard
    )
    
    await bot.send_photo(
        admin_chat_id,
        photo=message.photo[-1].file_id,
        caption=f"<b>üíé –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç </b>@{message.from_user.username}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"f'<b>–¢–∏–ø –∑–∞–∫–∞–∑–∞:</b><pre> –î–∏–∑–∞–π–Ω</pre>\n'f'<b>–¢–∏–ø –¥–∏–∑–∞–π–Ω–∞:</b><pre> {data.get("money")}, {data.get("age")}</pre>\n'f'<b>–ë—é–¥–∂–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> <pre>{data.get("lac")}</pre>\n'f'<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> <pre>{data.get("name")}</pre>',
        reply_markup=inline(
        f"{message.chat.id}",
        ),
    )
    await state.finish()


# –¢–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∏—à–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è inline

@dp.callback_query_handler(reg_callback.filter(status="1"))
# callback –¥–∞–Ω–Ω—ã–µ –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
async def decline(call: CallbackQuery, callback_data: dict):
    await call.answer()
    
    await bot.send_message(
        admin_chat_id, call.message.chat.id,  f"<b>‚ùå –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω @{call.from_user.username}, –ü—Ä–∏—á–∏–Ω–∞: –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–µ–∫—Ç–∞!</b>", reply_to_message_id=call.message.message_id
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç.
    await bot.send_message(int(callback_data.get("chat_id")), "<b>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå</b>\n–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞.")


@dp.callback_query_handler(reg_callback.filter(status="2"))
async def accept(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()

    await call.message.edit_reply_markup()

    nickname = call.data.split(":")[len(call.data.split(":")) - 1]

    accepting = f"<b>‚úÖ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç @{call.from_user.username} </b>\n\n " + call.message.caption

    await bot.edit_message_caption(
        chat_id = admin_chat_id, message_id = call.message.message_id, caption = accepting
    )
    # await bot.send_message(
    #         admin_chat_id, f"<b>üéâ –ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç @{call.from_user.username}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º @{nickname}</b>", reply_to_message_id=call.message.message_id
    # )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä–¥–∏–∫—Ç.
    await bot.send_message(int(callback_data.get("chat_id")), f"<b>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç ‚úÖ</b>\n–°–µ–π—á–∞—Å —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @{call.from_user.username}. (–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º)")



@dp.message_handler(commands=['listid'])
async def notify_users(message: types.Message):
    if message.from_id in admins_id: 
        for user in workers.find():
            await bot.send_message(message.chat.id, user['_id'])
    else: 
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')


@dp.message_handler(commands=['stat'])
async def notify_users(message: types.Message):
    if message.from_id in admins_id: 
        users = workers.find()
        quantly = 0
        for user in users:
            quantly = quantly + 1

        await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(quantly))

    else: 
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')

admins_id = [5557202913, 1511660386]

@dp.message_handler(commands=['sendall'])
async def notify_users(message: types.Message):
    if message.from_id in admins_id: 
        msg = message.text.replace('/sendall', '')
    
        for user in workers.find():
            try:
                await bot.send_message(user["_id"], msg)
            except:
                pass
    else: 
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')

@dp.message_handler(commands=['–º—É—Ç', 'mute'], commands_prefix='./', is_chat_admin=True)
async def mute(message):
      name1 = message.from_user.get_mention(as_html=True)
      if not message.reply_to_message:
         await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
         return
      try:
         muteint = int(message.text.split()[1])
         mutetype = message.text.split()[2]
         comment = " ".join(message.text.split()[3:])
      except IndexError:
         await message.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n`/–º—É—Ç 1 —á –ø—Ä–∏—á–∏–Ω–∞`')
         return
      if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
         dt = datetime.now() + timedelta(hours=muteint)
         timestamp = dt.timestamp()
         await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
         await message.reply(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º—É—Ç–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b><pre> {comment}</pre>',  parse_mode='html')
      elif mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
         dt = datetime.now() + timedelta(minutes=muteint)
         timestamp = dt.timestamp()
         await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
         await message.reply(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º—É—Ç–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b><pre> {comment}</pre>',  parse_mode='html')
      elif mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
         dt = datetime.now() + timedelta(days=muteint)
         timestamp = dt.timestamp()
         await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
         await message.reply(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º—É—Ç–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b><pre> {comment}</pre>',  parse_mode='html')

@dp.message_handler(commands=['–±–∞–Ω', 'ban'], commands_prefix='./', is_chat_admin=True)
async def ban(message):
    if message.from_id in admins_id:
        reason = message.text.split()
        user_chat: types.Chat = await bot.get_chat(message.reply_to_message.from_user.id)
        await message.chat.kick(user_chat.id)
        await message.delete()
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ!")
    else: 
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!')

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)